{
  ".js": {
    "spa-component-path": {
      "prefix": ["spa$path", "spa$/", "x$path", "x$/"],
      "body":"${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+/}${6:+/}$6/g}$0",
      "description":"SPA/XSR Component Path (componentX/componentY/ComponentZ)"
    },
    "spa-component-key": {
      "prefix": ["spa$#", "spa$name", "x$#", "x$name"],
      "body":"${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+_}${6:+_}$6/g}$0",
      "description":"SPA/XSR Component Key (componentX_componentY_ComponentZ)"
    },

    "spa-component": {
      "prefix": ["spa$", "spa.$"],
      "body": "spa.\\$('${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+/}${6:+/}$6/g}', {\n\t${1|require,style,target,templateUrl,dataUrl|}: '${2}'$0\n});",
      "description":"Define SPA Component"
    },
    "xsr-component": {
      "prefix": ["x$", "x.$"],
      "body": "xsr.\\$('${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+/}${6:+/}$6/g}', {\n\t${1|require,style,target,templateUrl,dataUrl|}: '${2}'$0\n});",
      "description":"Define SPA Component"
    },

    "new-spa-component": {
      "prefix": ["newSpa$", "newSpaComponent", "nsc", "spa$new"],
      "body": [
        "// @spa\\$:${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+/}${6:+/}$6/g}",
        "",
        "// componentName: ${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+_}${6:+_}$6/g}",
        "",
        "// available spa.$fn aliases: spa.$render as render; spa.$refresh as refresh; spa.merge as merge; spa.extend as extend;",
        "",
        "/* private properties */",
        "",
        "var _target = '#${1:targetContainer}';",
        "",
        "var _dataUrl = '${4:@apiKey/URL}';",
        "",
        "// type \\$_ to see other private properties",
        "$0",
        "",
        "function _renderCallback () { // DO NOT USE ARROW FUNCTION",
        "  var templateData = this.\\$data; // or app.componentX.\\$data",
        "",
        "  console.log('Component componentX has been rendered with Data:', templateData);",
        "",
        "  ${2:doSomething}();",
        "};",
        "",
        "/* local variables and functions */",
        "",
        "function ${2:doSomething} () {",
        "  console.log('Doing Something...');",
        "}",
        "",
        "/* export local variables or functions as properties accessible through component:componentX as app.componentX.actionX(); */",
        "var prop = {",
        "",
        "  ${3:actionX}: ${2:doSomething}",
        "",
        "};"
        ],
      "description":"Define new SPA Component"
    },

    "spa-comp-private-prop-target": {
      "prefix": "spa$_target",
      "body": "var _target = '#${1:targetContainer}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-require": {
      "prefix": "spa$_require",
      "body": "var _require = '${1:component_names-with-comma-delimiter}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-style": {
      "prefix": "spa$_style",
      "body": "var _style = '.';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-styleCache": {
      "prefix": "spa$_styleCache",
      "body": "var _styleCache = ${1|true,false|};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-scripts": {
      "prefix": "spa$_scripts",
      "body": "var _scripts = '${1:scriptPath-with-comma-delimiter}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-scriptsCache": {
      "prefix": "spa$_scriptsCache",
      "body": "var _scriptsCache = ${1|true,false|};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-template": {
      "prefix": "spa$_template",
      "body": "var _template = '${1:templateString}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-templateCache": {
      "prefix": "spa$_templateCache",
      "body": "var _templateCache = ${1|true,false|};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-templateScript": {
      "prefix": "spa$_templateScript",
      "body": "var _templateScript = ${1|true,false|};// to enable/disable scripts in template.$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-templateUrl": {
      "prefix": "spa$_templateUrl",
      "body": "var _templateUrl = '${1:URL}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-templateUrlMethod": {
      "prefix": "spa$_templateUrlMethod",
      "body": "var _templateUrlMethod = '${1|GET,POST|}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-templateUrlParams": {
      "prefix": "spa$_templateUrlParams",
      "body": "var _templateUrlParams = {${1:key}: '${2:value}'$3};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-templateUrlPayload": {
      "prefix": "spa$_templateUrlPayload",
      "body": "var _templateUrlPayload = {${1:key}: '${2:value}'$3};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-templateUrlHeaders": {
      "prefix": "spa$_templateUrlHeaders",
      "body": "var _templateUrlHeaders = {${1:key}: '${2:value}'$3};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-data": {
      "prefix": "spa$_data",
      "body": "var _data = {${1:key}: '${2:value}'$3};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataUrl": {
      "prefix": "spa$_dataUrl",
      "body": "var _dataUrl = '${1:@apiKey/URL}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataUrlCache": {
      "prefix": "spa$_dataUrlCache",
      "body": "var _dataUrlCache = ${1|true,false|};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataUrlMethod": {
      "prefix": "spa$_dataUrlMethod",
      "body": "var _dataUrlMethod = '${1|GET,POST|}';$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataUrlParams": {
      "prefix": "spa$_dataUrlParams",
      "body": "var _dataUrlParams = ${1:};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataUrlHeaders": {
      "prefix": "spa$_dataUrlHeaders",
      "body": "var _dataUrlHeaders = ${1:};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataParams": {
      "prefix": "spa$_dataParams",
      "body": "var _dataParams = {${1:key}: '${2:value}'$3};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataModel": {
      "prefix": "spa$_dataModel",
      "body": "var _dataModel = '${1|.,target.key|}';$0// use . for entire response object as template data",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataCache": {
      "prefix": "spa$_dataCache",
      "body": "var _dataCache = ${1|true,false|};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataDefaults": {
      "prefix": "spa$_dataDefaults",
      "body": "var _dataDefaults = {${1:key}: '${2:value}'$3};$0",
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-events": {
      "prefix": "spa$_events",
      "body": "var _events = [\n\t{ target: '${1:#target element .selector}',\n\t\ton${2|Click,Dblclick,Mouseenter,Mouseleave,Keydown,Keyup,Keypress,Focus,Blur,Change,Submit|}: function ( event ) { // DO NOT use arrow function\n\t\t\t$3\n\t\t}\n\t}${4}\n];$0",
      "description":"SPA Component private property"
    },

    "spa-comp-private-prop-dataPreRequest": {
      "prefix": "spa$_dataPreRequest",
      "body": [
        "function _dataPreRequest () {",
        "  // doSomething before API call, like showing progress message/indicator/animation etc.",
        "  // optionally override base dataXXXX properties before the API call by return object of this function.",
        "  // return { dataUrl: 'newUrl' }\n",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataPreProcessAsync": {
      "prefix": "spa$_dataPreProcessAsync",
      "body": ["function _dataPreProcessAsync ( initialData ) {",
        "  // initialData == the _data or response of _dataUrl of this component\n",
        "  var apiPayLoad = {};\n",
        "  var api1 = spa.api.${1|get,post|}('${2:@api1Key}', apiPayLoad),$0",
        "      api2 = spa.api.get('@api2Key'),",
        "      api3 = spa.api.get('@api3Key');\n",
        "  return [api1, api2, api3];",
        "}\n",
        "function _dataProcess ( initialData, api1ResData, api2ResData, api3ResData ) {\n",
        "  var finalTemplateData = {};\n",
        "  //construct finalTemplateData from initialData, api1ResData, api2ResData, api3ResData\n",
        "  return finalTemplateData; //send to template for rendering",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataProcess": {
      "prefix": "spa$_dataProcess",
      "body": [
        "function _dataProcess ( initialData ) {\n",
        "  var finalTemplateData = initialData;\n",
        "  // update finalTemplateData for template$0\n",
        "  return finalTemplateData; // send to template for rendering",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-onRender": {
      "prefix": "spa$_onRender",
      "body": [
        "function _onRender ( arg ) {",
        "  // doSomething just before render this component",
        "  // arg.data contains the finalTemplateData",
        "  // optionally, return false; to stop the render",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-onRefresh": {
      "prefix": "spa$_onRefresh",
      "body": [
        "function _onRefresh ( arg ) {",
        "  // doSomething just before refresh this component",
        "  // arg.data contains the finalTemplateData",
        "  // optionally, return false; to stop the refresh",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-onRemove": {
      "prefix": "spa$_onRemove",
      "body": [
        "function _onRemove ( byCompName ) {",
        "  // doSomething just before remove this component from DOM",
        "  // byCompName = name of the component, which attempts to remove this component",
        "  // optionally, return false; to stop this action",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },

    "spa-comp-private-prop-renderCallback": {
      "prefix": "spa$_renderCallback",
      "body": [
        "function _renderCallback ( arg ) {",
        "  // doSomething just after this component is added to the DOM by spa.\\$render(...) call",
        "  // arg.model holds the final template data",
        "  // arg.iOptions holds the options, which are used to render this component\n",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-refreshCallback": {
      "prefix": "spa$_refreshCallback",
      "body": [
        "function _refreshCallback ( arg ) {",
        "  // doSomething just after this component is added to the DOM by spa.\\$refresh(...) call",
        "  // arg.model holds the final template data",
        "  // arg.iOptions holds the options, which are used to render this component\n",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-dataValidate": {
      "prefix": "spa$_dataValidate",
      "body": [
        "function _dataValidate ( apiRes, XHR ) {",
        "  // validate apiRes here; return true ==> continues rendering / false ==> stops rendering",
        "  // NOTE: if (true) _dataModel key will be used to extract data from apiRes for the template (i.e. templateData = apiRes[ _dataModel ])",
        "  // if _dataModel is not defined, entire apiRes will be used for the template",
        "  $0",
        "  return true;",
        "}"
      ],
      "description":"SPA Component private property"
    },

    "spa-comp-private-prop-onTemplateUrlError": {
      "prefix": "spa$_onTemplateUrlError",
      "body": [
        "function _onTemplateUrlError ( XHR, errorType, statusText ) {",
        "  // error handler for _templateUrl error",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-onDataUrlError": {
      "prefix": "spa$_onDataUrlError",
      "body": [
        "function _onDataUrlError (XHR, statusText) {",
        "  // error handler for _dataUrl error",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },
    "spa-comp-private-prop-onError": {
      "prefix": "spa$_onError",
      "body": [
        "function _onError (XHR, statusText) {",
        "  // error handler for _dataUrl error",
        "  $0",
        "}"
      ],
      "description":"SPA Component private property"
    },

    "spa-component-file": {
      "prefix": ["spa$filename", "x$filename"],
      "body":"${TM_FILENAME_BASE}$0",
      "description":"This File name"
    },

    "spa-component-sourceURL": {
      "prefix": ["spa$sourceURL", "xsr$sourceURL", "x$sourceURL", "//#sourceURL"],
      "body":"//# sourceURL=spa$/${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+/}${6:+/}$6/g}/${TM_FILENAME}$0",
      "description":"//# SourceMap=file/path"
    },

    "spa-comp-prop-x": {
      "prefix": ["spa$.", "xsr$.", "x$.", "$."],
      "body": "${1|require,target,style,styleCache,styles,stylesCache,scripts,scriptsCache,template,templateCache,templateScript,templateUrl,templateUrlMethod,templateUrlParams,templateUrlPayload,templateUrlHeaders,onTemplateUrlError,data,dataUrl,dataUrlCache,dataUrlMethod,dataUrlParams,dataUrlHeaders,dataParams,dataModel,dataCache,dataDefaults,onDataUrlError,onError,dataValidate,dataProcess,dataPreRequest,dataPreProcessAsync,onRender,onRefresh,onRemove,renderCallback,refreshCallback,events|}: $0",
      "description":"XSR/SPA Component base properties"
    },

    "spa-component-extend": {
      "prefix": ["spa$extend", "spa.$extend"],
      "body": "spa.\\$extend('${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+/}${6:+/}$6/g}', {\n\trenderCallback: function(){\n\t\t//console.log(this.\\$data);\n\t\t//TODO: doSomething here.\n\t},\n\n\t${3:doSomething}: function(){\n\t\t${4://TODO: doSomething here.}$0\n\t},\n\n\tevents: [\n\t\t{ target:'${1:#target element .selector}',\n\t\t\ton${2|Click,Dblclick,Mouseenter,Mouseleave,Keydown,Keyup,Keypress,Focus,Blur,Change,Submit|}: function( event ){\n\t\t\t\t//TODO: doSomething here.\n\t\t\t\tapp.${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+_}${6:+_}$6/g}.${3:doSomething}();\n\t\t\t}\n\t\t}\n\t]\n});",
      "description":"Extend SPA Component (deprecated)"
    },

    "spa-component-render": {
      "prefix": ["spa$render", "spa.$render"],
      "body": "spa.\\$render('${1:componentName}', {$0});",
      "description":"Render SPA Component"
    },
    "xsr-component-render": {
      "prefix": ["xsr$render", "xsr.$render", "x$render"],
      "body": "xsr.\\$render('${1:componentName}', {$0});",
      "description":"Render XSR Component"
    },
    "spa-component-refresh": {
      "prefix": ["spa$refresh", "spa.$refresh"],
      "body": "spa.\\$refresh('${1:componentName}', {$0});",
      "description":"Refresh SPA Component"
    },
    "xsr-component-refresh": {
      "prefix": ["xsr$refresh", "xsr.$refresh", "x$refresh"],
      "body": "xsr.\\$refresh('${1:componentName}', {$0});",
      "description":"Refresh XSR Component"
    },
    "spa-component-show": {
      "prefix": ["spa$show", "spa.$show"],
      "body": "spa.\\$show('${1:componentName}', {$0});",
      "description":"Show SPA Component"
    },
    "xsr-component-show": {
      "prefix": ["xsr$show", "xsr.$show", "x$show"],
      "body": "xsr.\\$show('${1:componentName}', {$0});",
      "description":"Show XSR Component"
    },
    "spa-component-hide": {
      "prefix": ["spa$hide", "spa.$hide"],
      "body": "spa.\\$hide('${1:componentName}', {$0});",
      "description":"Hide SPA Component"
    },
    "xsr-component-hide": {
      "prefix": ["xsr$hide", "xsr.$hide", "x$hide"],
      "body": "xsr.\\$hide('${1:componentName}', {$0});",
      "description":"Hide XSR Component"
    },
    "spa-component-enable": {
      "prefix": ["spa$enable", "spa.$enable"],
      "body": "spa.\\$enable('${1:componentName}', {$0});",
      "description":"Enable SPA Component"
    },
    "xsr-component-enable": {
      "prefix": ["xsr$enable", "xsr.$enable", "x$enable"],
      "body": "xsr.\\$enable('${1:componentName}', {$0});",
      "description":"Enable XSR Component"
    },
    "spa-component-disable": {
      "prefix": ["spa$disable", "spa.$disable"],
      "body": "spa.\\$disable('${1:componentName}', {$0});",
      "description":"Disable SPA Component"
    },
    "xsr-component-disable": {
      "prefix": ["xsr$disable", "xsr.$disable", "x$disable"],
      "body": "xsr.\\$disable('${1:componentName}', {$0});",
      "description":"Disable XSR Component"
    },
    "spa-component-remove": {
      "prefix": ["spa$remove", "spa.$remove"],
      "body": "spa.\\$remove('${1:componentName}');$0",
      "description":"Remove SPA Component from DOM"
    },
    "xsr-component-remove": {
      "prefix": ["xsr$remove", "xsr.$remove", "x$remove"],
      "body": "xsr.\\$remove('${1:componentName}');$0",
      "description":"Remove XSR Component from DOM"
    },
    "spa-component-destroy": {
      "prefix": ["spa$destroy", "spa.$destroy"],
      "body": "spa.\\$destroy('${1:componentName}');$0",
      "description":"Remove SPA Component from DOM and destroy its properties"
    },
    "xsr-component-destroy": {
      "prefix": ["xsr$destroy", "xsr.$destroy", "x$destroy"],
      "body": "xsr.\\$destroy('${1:componentName}');$0",
      "description":"Remove XSR Component from DOM and destroy its properties"
    },

    "spa-component-reference": {
      "prefix": ["app$"],
      "body": "app.${1:${TM_DIRECTORY/.*components(\\/|\\\\)(([^\\/\\\\]*)(\\/|\\\\)?)|(\\/|\\\\)([^\\/\\\\]*)/$3${4:+_}${6:+_}$6/g}}.${2:property}$0",
      "description":"XSR/SPA Component Reference"
    },
    "app-component-reference": {
      "prefix": ["app$$"],
      "body": "app.${1:componentX}.${2:property}$0",
      "description":"SPA Component Reference"
    },

    "spa-bindData": {
      "prefix": "spa.bindData",
      "body": "spa.bindData( '${1:#contextRoot}', ${2:dataObject}, '${3:.elementFilter}' );$0",
      "description":"SPA - Data Bind instead of re-render. same as spa.dataBind"
    },
    "xsr-bindData": {
      "prefix": ["xsr.bindData"],
      "body": "xsr.bindData( '${1:#contextRoot}', ${2:dataObject}, '${3:.elementFilter}' );$0",
      "description":"XSR - Data Bind instead of re-render. same as xsr.dataBind"
    },
    "spa-dataBind": {
      "prefix": "spa.dataBind",
      "body": "spa.dataBind( '${1:#contextRoot}', ${2:dataObject}, '${3:.elementFilter}' );$0",
      "description":"SPA - Data Bind instead of re-render. same as spa.bindData"
    },
    "xsr-dataBind": {
      "prefix": "xsr.dataBind",
      "body": "xsr.dataBind( '${1:#contextRoot}', ${2:dataObject}, '${3:.elementFilter}' );$0",
      "description":"XSR - Data Bind instead of re-render. same as xsr.bindData"
    },
    "spa-bindTemplateData": {
      "prefix": "spa.bindTemplateData",
      "body": "spa.bindTemplateData( '${1:#contextRoot}', ${2:dataObject} );$0",
      "description":"SPA - bind Data with template"
    },
    "xsr-bindTemplateData": {
      "prefix": "xsr.bindTemplateData",
      "body": "xsr.bindTemplateData( '${1:#contextRoot}', ${2:dataObject} );$0",
      "description":"XSR - bind Data with template"
    },

    "spa-defaults": {
      "prefix": "spa.defaults",
      "body": "spa.defaults.set( {\n\tcomponents: {\n\t\trootPath: '${1:app/components/}',\n\t\tinFolder: ${2:true},\n\t\ttemplateExt: '.${3:html}',\n\t\tscriptExt: '.${4:js}',\n\t\tcallback: '${5}'}\n\t} );",
      "description":"SPA Default Settings"
    },
    "xsr-defaults": {
      "prefix": "xsr.defaults",
      "body": "xsr.defaults.set( {\n\tcomponents: {\n\t\trootPath: '${1:app/components/}',\n\t\tinFolder: ${2:true},\n\t\ttemplateExt: '.${3:html}',\n\t\tscriptExt: '.${4:js}',\n\t\tcallback: '${5}'}\n\t} );",
      "description":"XSR Default Settings"
    },

    "spa-doDataValidation": {
      "prefix": "spa.doDataValidation-silent",
      "body": "spa.doDataValidation( '#${1:formID}' )$0",
      "description":"SPA - dataValidation - Silent"
    },
    "xsr-doDataValidation": {
      "prefix": "xsr.doDataValidation-silent",
      "body": "xsr.doDataValidation( '#${1:formID}' )$0",
      "description":"XSR - dataValidation - Silent"
    },
    "spa-doDataValidation-showErrorMsg": {
      "prefix": "spa.doDataValidation",
      "body": "spa.doDataValidation( '#${1:formID}', true )$0",
      "description":"SPA - dataValidation - Show Error Msg"
    },
    "xsr-doDataValidation-showErrorMsg": {
      "prefix": "xsr.doDataValidation",
      "body": "xsr.doDataValidation( '#${1:formID}', true )$0",
      "description":"XSR - dataValidation - Show Error Msg"
    },
    "spa-validateForm": {
      "prefix": "spa.validateForm-silent",
      "body": "spa.validateForm( '#${1:formID}' )$0",
      "description":"SPA - validateForm - Silent"
    },
    "xsr-validateForm": {
      "prefix": "xsr.validateForm-silent",
      "body": "xsr.validateForm( '#${1:formID}' )$0",
      "description":"XSR - validateForm - Silent"
    },
    "spa-validateForm-showErrorMsg": {
      "prefix": "spa.validateForm",
      "body": "spa.validateForm( '#${1:formID}', true )$0",
      "description":"SPA - validateForm - Show Error Msg"
    },
    "xsr-validateForm-showErrorMsg": {
      "prefix": "xsr.validateForm",
      "body": "xsr.validateForm( '#${1:formID}', true )$0",
      "description":"XSR - validateForm - Show Error Msg"
    },

    "spa-findSafe": {
      "prefix": "spa.findInObj",
      "body": "spa.findSafe( ${1:objectName}, '${2:key.path}' );$0",
      "description":"SPA - find in Object"
    },
    "xsr-findSafe": {
      "prefix": ["xsr.findIn", "xsr.findInObj"],
      "body": "xsr.findIn( ${1:objectName}, '${2:key.path}' );$0",
      "description":"XSR - find in Object"
    },
    "spa-getElValue": {
      "prefix": "spa.getElValue",
      "body": "spa.getElValue( '#${1:elementID}' )$0",
      "description":"SPA - get DOM Element value"
    },
    "xsr-getElValue": {
      "prefix": "xsr.getElValue",
      "body": "xsr.getElValue( '#${1:elementID}' )$0",
      "description":"XSR - get DOM Element value"
    },
    "spa-getElValue-EscHtml": {
      "prefix": "spa.getElValue-EscHTML",
      "body": "spa.getElValue( '#${1:elementID}', true )$0",
      "description":"SPA - get DOM Element value and Escape HTML.\nReturns: string"
    },
    "xsr-getElValue-EscHtml": {
      "prefix": "xsr.getElValue-EscHTML",
      "body": "xsr.getElValue( '#${1:elementID}', true )$0",
      "description":"XSR - get DOM Element value and Escape HTML.\nReturns: string"
    },
    "spa-getLocHash": {
      "prefix": "spa.getLocHash",
      "body": "spa.getLocHash();$0",
      "description":"SPA - get window.location.hash"
    },
    "xsr-getLocHash": {
      "prefix": "xsr.getLocHash",
      "body": "xsr.getLocHash();$0",
      "description":"XSR - get window.location.hash"
    },
    "spa-getModifiedElements": {
      "prefix": "spa.getModifiedElements",
      "body": "spa.getModifiedElements( '#${1:formID}' );$0",
      "description":"SPA - get modified elements list.\nReturns: array"
    },
    "xsr-getModifiedElements": {
      "prefix": "xsr.getModifiedElements",
      "body": "xsr.getModifiedElements( '#${1:formID}' );$0",
      "description":"XSR - get modified elements list.\nReturns: array"
    },
    "spa-hasKey": {
      "prefix": "spa.hasKey",
      "body": "spa.hasKey( ${1:Object}, '${2:key.full.path}' )$0",
      "description":"SPA - find in object if path exists?.\nReturns: boolean."
    },
    "xsr-hasKey": {
      "prefix": "xsr.hasKey",
      "body": "xsr.hasKey( ${1:Object}, '${2:key.full.path}' )$0",
      "description":"XSR - find in object if path exists?.\nReturns: boolean."
    },
    "spa-hasKeyIgnoreCase": {
      "prefix": "spa.hasKeyIgnoreCase",
      "body": "spa.hasKeyIgnoreCase( ${1:Object}, '${2:key.full.path}' )$0",
      "description":"SPA - find in object is path exists?.\nReturns: boolean."
    },
    "xsr-hasKeyIgnoreCase": {
      "prefix": "xsr.hasKeyIgnoreCase",
      "body": "xsr.hasKeyIgnoreCase( ${1:Object}, '${2:key.full.path}' )$0",
      "description":"XSR - find in object is path exists?.\nReturns: boolean."
    },
    "spa-hasKeys-all": {
      "prefix": "spa.hasKeys",
      "body": "spa.hasKeys( ${1:Object}, '${2:key.full.path.1},${3:key.full.path.2}' )$0",
      "description":"SPA - find in object are ALL key-paths exist?.\nReturns: boolean."
    },
    "xsr-hasKeys-all": {
      "prefix": "xsr.hasKeys",
      "body": "xsr.hasKeys( ${1:Object}, '${2:key.full.path.1},${3:key.full.path.2}' )$0",
      "description":"XSR - find in object are ALL key-paths exist?.\nReturns: boolean."
    },
    "spa-hasKeys-any": {
      "prefix": "spa.hasKeys",
      "body": "spa.hasKeys( ${1:Object}, '${2:key.full.path.1}|${3:key.full.path.2}' )$0",
      "description":"SPA - find in object is ANY ONE key-path exist?.\nReturns: boolean."
    },
    "xsr-hasKeys-any": {
      "prefix": "xsr.hasKeys",
      "body": "xsr.hasKeys( ${1:Object}, '${2:key.full.path.1}|${3:key.full.path.2}' )$0",
      "description":"XSR - find in object is ANY ONE key-path exist?.\nReturns: boolean."
    },
    "spa-hasPrimaryKeys-all": {
      "prefix": "spa.hasPrimaryKeys",
      "body": "spa.hasPrimaryKeys( ${1:Object}, '${2:primaryKey1},${3:primaryKey2}' )$0",
      "description":"SPA - find in object are ALL primary keys exist?.\nReturns: boolean."
    },
    "xsr-hasPrimaryKeys-all": {
      "prefix": "xsr.hasPrimaryKeys",
      "body": "xsr.hasPrimaryKeys( ${1:Object}, '${2:primaryKey1},${3:primaryKey2}' )$0",
      "description":"XSR - find in object are ALL primary keys exist?.\nReturns: boolean."
    },
    "spa-hasPrimaryKeys-any": {
      "prefix": "spa.hasPrimaryKeys",
      "body": "spa.hasPrimaryKeys( ${1:Object}, '${2:primaryKey1}|${3:primaryKey2}' )$0",
      "description":"SPA - find in object is ANY on primary key exists?.\nReturns: boolean."
    },
    "xsr-hasPrimaryKeys-any": {
      "prefix": "xsr.hasPrimaryKeys",
      "body": "xsr.hasPrimaryKeys( ${1:Object}, '${2:primaryKey1}|${3:primaryKey2}' )$0",
      "description":"XSR - find in object is ANY on primary key exists?.\nReturns: boolean."
    },
    "spa-i18n-text": {
      "prefix": "spa.i18n.text",
      "body": "spa.i18n.text( '${1:i18n.key}', ${2:optionalParamsObject} )$0",
      "description":"SPA - i18n text for key.\nReturns: string."
    },
    "xsr-i18n-text": {
      "prefix": "xsr.i18n.text",
      "body": "xsr.i18n.text( '${1:i18n.key}', ${2:optionalParamsObject} )$0",
      "description":"XSR - i18n text for key.\nReturns: string."
    },
    "spa-i18n-apply": {
      "prefix": "spa.i18n.apply",
      "body": "spa.i18n.apply( '#${1:OptionalContext}', '${2:optionalElementSelector}' );$0",
      "description":"SPA - apply i18n text on the element(s) in the context/scope."
    },
    "xsr-i18n-apply": {
      "prefix": "xsr.i18n.apply",
      "body": "xsr.i18n.apply( '#${1:OptionalContext}', '${2:optionalElementSelector}' );$0",
      "description":"XSR - apply i18n text on the element(s) in the context/scope."
    },

    "spa-i18n-setLang": {
      "prefix": "spa.i18n.setLang",
      "body": "spa.i18n.setLang( '${1|en,en-US,fr,fr-FR,ja,ja-JP|}', {\n\turl: '${2:@langUrl}',\n\turlParams: {$3}\n\t} );$0",
      "description":"SPA - set/change i18n language."
    },
    "xsr-i18n-setLang": {
      "prefix": "xsr.i18n.setLang",
      "body": "xsr.i18n.setLang( '${1|en,en-US,fr,fr-FR,ja,ja-JP|}', {\n\turl: '${2:@langUrl}',\n\turlParams: {$3}\n\t} );$0",
      "description":"XSR - set/change i18n language."
    },
    "spa-i18n-updateLang": {
      "prefix": "spa.i18n.updateLang",
      "body": "spa.i18n.updateLang( {\n\turl: '${2:@langUrl}',\n\turlParams: {$3}\n\t} );$0",
      "description":"SPA - update i18n language dictionary."
    },
    "xsr-i18n-updateLang": {
      "prefix": "xsr.i18n.updateLang",
      "body": "xsr.i18n.updateLang( {\n\turl: '${2:@langUrl}',\n\turlParams: {$3}\n\t} );$0",
      "description":"XSR - update i18n language dictionary."
    },

    "spa-is": {
      "prefix": "spa.is",
      "body": "spa.is( ${1:variable}, '${2|array,boolean,function,number,null,object,string,undefined|}|${3|array,boolean,function,number,null,object,string,undefined|}' )$0",
      "description":"SPA - check variable type.\nReturns: boolean."
    },
    "xsr-is": {
      "prefix": "xsr.is",
      "body": "xsr.is( ${1:variable}, '${2|array,boolean,function,number,null,object,string,undefined|}|${3|array,boolean,function,number,null,object,string,undefined|}' )$0",
      "description":"XSR - check variable type.\nReturns: boolean."
    },
    "spa-isBlank": {
      "prefix": "spa.isBlank",
      "body": "spa.isBlank( ${1:variable} )$0",
      "description":"SPA - check is variable blank(string) or empty(array/object) or null or undefined?\nReturns: boolean."
    },
    "xsr-isBlank": {
      "prefix": "xsr.isBlank",
      "body": "xsr.isBlank( ${1:variable} )$0",
      "description":"XSR - check is variable blank(string) or empty(array/object) or null or undefined?\nReturns: boolean."
    },
    "spa-isElementExist": {
      "prefix": "spa.isElementExist",
      "body": "spa.isElementExist( '${1:elementSelector}' )$0",
      "description":"SPA - check is HTML element exists?\nReturns: boolean."
    },
    "xsr-isElementExist": {
      "prefix": "xsr.isElementExist",
      "body": "xsr.isElementExist( '${1:elementSelector}' )$0",
      "description":"XSR - check is HTML element exists?\nReturns: boolean."
    },
    "spa-isElValueChanged": {
      "prefix": "spa.isElValueChanged",
      "body": "spa.isElValueChanged( '${1:elementSelector}' )$0",
      "description":"SPA - check is HTML element value changed?\nReturns: boolean."
    },
    "xsr-isElValueChanged": {
      "prefix": "xsr.isElValueChanged",
      "body": "xsr.isElValueChanged( '${1:elementSelector}' )$0",
      "description":"XSR - check is HTML element value changed?\nReturns: boolean."
    },
    "spa-now": {
      "prefix": "spa.now",
      "body": "spa.now()$0",
      "description":"SPA - Now: current time in milliseconds"
    },
    "xsr-now": {
      "prefix": "xsr.now",
      "body": "xsr.now()$0",
      "description":"XSR - Now: current time in milliseconds"
    },
    "spa-onUrlHashChange": {
      "prefix": "spa.onUrlHashChange",
      "body": "spa.onUrlHashChange = function( urlHash ){\n\t\t${1}\n\t};$0",
      "description":"SPA - event onUrlHashChange."
    },
    "xsr-onUrlHashChange": {
      "prefix": "xsr.onUrlHashChange",
      "body": "xsr.onUrlHashChange = function( urlHash ){\n\t\t${1}\n\t};$0",
      "description":"XSR - event onUrlHashChange."
    },
    "spa-queryStringToObject": {
      "prefix": "spa.queryStringToObject",
      "body": "spa.queryStringToObject( '${1:optionalQryString}' );$0",
      "description":"SPA - URL query string (name=value&...) to json object.\nReturns: object."
    },
    "xsr-queryStringToObject": {
      "prefix": "xsr.queryStringToObject",
      "body": "xsr.queryStringToObject( '${1:optionalQryString}' );$0",
      "description":"XSR - URL query string (name=value&...) to json object.\nReturns: object."
    },
    "spa-rand": {
      "prefix": "spa.rand",
      "body": "spa.rand( ${1:min}, ${2:max} )$0",
      "description":"SPA - random number between min and max."
    },
    "xsr-rand": {
      "prefix": "xsr.rand",
      "body": "xsr.rand( ${1:min}, ${2:max} )$0",
      "description":"XSR - random number between min and max."
    },
    "spa-randomPassword": {
      "prefix": "spa.randomPassword",
      "body": "spa.randomPassword( ${1:length}, '${2:optionalString}' );$0",
      "description":"SPA - random password."
    },
    "xsr-randomPassword": {
      "prefix": "xsr.randomPassword",
      "body": "xsr.randomPassword( ${1:length}, '${2:optionalString}' );$0",
      "description":"XSR - random password."
    },
    "spa-range": {
      "prefix": "spa.range",
      "body": "spa.range( '${1:min}..${2:max}' );$0",
      "description":"SPA - range from min to max by step 1."
    },
    "xsr-range": {
      "prefix": "xsr.range",
      "body": "xsr.range( '${1:min}..${2:max}' );$0",
      "description":"XSR - range from min to max by step 1."
    },
    "spa-range-byStep": {
      "prefix": "spa.range-byStep",
      "body": "spa.range( '${1:min}..${2:max}:${3:stepBy}' );$0",
      "description":"SPA - range from min to max by stepBy."
    },
    "xsr-range-byStep": {
      "prefix": "xsr.range-byStep",
      "body": "xsr.range( '${1:min}..${2:max}:${3:stepBy}' );$0",
      "description":"XSR - range from min to max by stepBy."
    },
    "spa-range-year": {
      "prefix": "spa.range-year",
      "body": "spa.range( 'Y-${1:Number}..Y+${2:Number}' );$0",
      "description":"SPA - year range from currentYear-N to currentYear+N."
    },
    "xsr-range-year": {
      "prefix": "xsr.range-year",
      "body": "xsr.range( 'Y-${1:Number}..Y+${2:Number}' );$0",
      "description":"XSR - year range from currentYear-N to currentYear+N."
    },
    "spa-resetElementsDefaultValue": {
      "prefix": "spa.resetElementsDefaultValue",
      "body": "spa.resetElementsDefaultValue( '${1:elementsSelector}' );$0",
      "description":"SPA - reset element(s)' default value."
    },
    "xsr-resetElementsDefaultValue": {
      "prefix": "xsr.resetElementsDefaultValue",
      "body": "xsr.resetElementsDefaultValue( '${1:elementsSelector}' );$0",
      "description":"XSR - reset element(s)' default value."
    },
    "spa-serializeFormToSimpleObject": {
      "prefix": "spa.serializeFormToSimpleObject",
      "body": "spa.serializeFormToSimpleObject( '#${1:formID}' );$0",
      "description":"SPA - serialize form element values to simple object."
    },
    "xsr-serializeFormToSimpleObject": {
      "prefix": "xsr.serializeFormToSimpleObject",
      "body": "xsr.serializeFormToSimpleObject( '#${1:formID}' );$0",
      "description":"XSR - serialize form element values to simple object."
    },
    "spa-serializeFormToObject": {
      "prefix": "spa.serializeFormToObject",
      "body": "spa.serializeFormToObject( '#${1:formID}' );$0",
      "description":"SPA - serialize form element values to object."
    },
    "xsr-serializeFormToObject": {
      "prefix": "xsr.serializeFormToObject",
      "body": "xsr.serializeFormToObject( '#${1:formID}' );$0",
      "description":"XSR - serialize form element values to object."
    },
    "spa-toQueryString": {
      "prefix": "spa.toQueryString",
      "body": "spa.toQueryString( ${1:Object} );",
      "description":"SPA - JSON Object to URL Query String: name=value&..."
    },
    "xsr-toQueryString": {
      "prefix": "xsr.toQueryString",
      "body": "xsr.toQueryString( ${1:Object} );",
      "description":"XSR - JSON Object to URL Query String: name=value&..."
    },
    "spa-year": {
      "prefix": "spa.year",
      "body": "spa.year( ${1:+/-number} );$0",
      "description":"SPA - year: with + or - count. Default current year."
    },
    "xsr-year": {
      "prefix": "xsr.year",
      "body": "xsr.year( ${1:+/-number} );$0",
      "description":"XSR - year: with + or - count. Default current year."
    },
    "spa-urlHash": {
      "prefix": "spa.urlHash",
      "body": "spa.urlHash();$0",
      "description":"SPA - urlHash:\nReturns: '/hash0/hash1/hash2'"
    },
    "xsr-urlHash": {
      "prefix": "xsr.urlHash",
      "body": "xsr.urlHash();$0",
      "description":"XSR - urlHash:\nReturns: '/hash0/hash1/hash2'"
    },
    "spa-urlHashByIndex": {
      "prefix": "spa.urlHash-byIndex",
      "body": "spa.urlHash( ${1:hashIndexNumber} );$0",
      "description":"SPA - urlHash:\nReturns: string"
    },
    "xsr-urlHashByIndex": {
      "prefix": "xsr.urlHash-byIndex",
      "body": "xsr.urlHash( ${1:hashIndexNumber} );$0",
      "description":"XSR - urlHash:\nReturns: string"
    },
    "spa-urlHashAsArray": {
      "prefix": "spa.urlHash-asArray",
      "body": "spa.urlHash( [] );$0",
      "description":"SPA - urlHash:\nReturns: array"
    },
    "xsr-urlHashAsArray": {
      "prefix": "xsr.urlHash-asArray",
      "body": "xsr.urlHash( [] );$0",
      "description":"XSR - urlHash:\nReturns: array"
    },
    "spa-urlHashAsObject": {
      "prefix": "spa.urlHash-asObj",
      "body": "spa.urlHash( ['${1:key0}', '${1:key1}'] );$0",
      "description":"SPA - urlHash:\nReturns: object"
    },
    "xsr-urlHashAsObject": {
      "prefix": "xsr.urlHash-asObj",
      "body": "xsr.urlHash( ['${1:key0}', '${1:key1}'] );$0",
      "description":"XSR - urlHash:\nReturns: object"
    },

    "str-beginsWithStr": {
      "prefix": ".beginsWithStr",
      "body": "${1:srcString}.beginsWithStr( '${2:string}' )$0",
      "description":"String.beginsWithStr"
    },
    "str-beginsWithStrIgnoreCase": {
      "prefix": ".beginsWithStrIgnoreCase",
      "body": "${1:srcString}.beginsWithStrIgnoreCase( '${2:string}' )$0",
      "description":"String.beginsWithStrIgnoreCase"
    },
    "str-endsWithStr": {
      "prefix": ".endsWithStr",
      "body": "${1:srcString}.endsWithStr( '${2:string}' )$0",
      "description":"String.endsWithStr"
    },
    "str-endsWithStrIgnoreCase": {
      "prefix": ".endsWithStrIgnoreCase",
      "body": "${1:srcString}.endsWithStrIgnoreCase( '${2:string}' )$0",
      "description":"String.endsWithStrIgnoreCase"
    },
    "str-containsStr": {
      "prefix": ".containsStr",
      "body": "${1:srcString}.containsStr( '${2:string}' )$0",
      "description":"String.containsStr"
    },
    "str-containsStrIgnoreCase": {
      "prefix": ".containsStrIgnoreCase",
      "body": "${1:srcString}.containsStrIgnoreCase( '${2:string}' )$0",
      "description":"String.containsStrIgnoreCase"
    },
    "str-equalsIgnoreCase": {
      "prefix": ".equalsIgnoreCase",
      "body": "${1:srcString}.equalsIgnoreCase( '${2:string}' )$0",
      "description":"String.equalsIgnoreCase"
    },
    "str-extractStrBetweenIn": {
      "prefix": ".extractStrBetweenIn",
      "body": "${1:srcString}.extractStrBetweenIn( '${2:beginString}', '${3:endString}' );$0",
      "description":"String.extractStrBetweenIn\nReturns: array"
    },
    "str-extractStrBetweenEx": {
      "prefix": ".extractStrBetweenEx",
      "body": "${1:srcString}.extractStrBetweenEx( '${2:beginString}', '${3:endString}' );$0",
      "description":"String.extractStrBetweenEx\nReturns: array"
    },
    "str-getLeftStrByIndex": {
      "prefix": ".getLeftStrByIndex",
      "body": "${1:srcString}.getLeftStr( ${2:splitFromIndexNumber} );$0",
      "description":"String.getLeftStr"
    },
    "str-getLeftStrByStr": {
      "prefix": ".getLeftStrByStr",
      "body": "${1:srcString}.getLeftStr( '${2:splitString}' );$0",
      "description":"String.getLeftStr"
    },
    "str-getRightStrByIndex": {
      "prefix": ".getRightStrByIndex",
      "body": "${1:srcString}.getRightStr( ${2:splitFromIndexNumber} );$0",
      "description":"String.getRightStr"
    },
    "str-getRightStrByStr": {
      "prefix": ".getRightStrByStr",
      "body": "${1:srcString}.getRightStr( '${2:splitString}' );$0",
      "description":"String.getRightStr"
    },
    "str-isBlankStr": {
      "prefix": ".isBlankStr",
      "body": "${1:srcString}.isBlankStr()$0",
      "description":"String.isBlankStr"
    },
    "str-ifBlankStr": {
      "prefix": ".ifBlankStr",
      "body": "${1:srcString}.ifBlankStr( '${2:forBlank}', '${3:optional-forNotBlank}' );$0",
      "description":"String.ifBlankStr\nReturns: String"
    },
    "str-isNumberStr": {
      "prefix": ".isNumberStr",
      "body": "${1:srcString}.isNumberStr()$0",
      "description":"String.isNumberStr"
    },
    "str-trimStr": {
      "prefix": ".trimStr",
      "body": "${1:srcString}.trimStr( '${2:trimStr}' );$0",
      "description":"String.trimStr"
    },
    "str-trimLeftStr": {
      "prefix": ".trimLeftStr",
      "body": "${1:srcString}.trimLeftStr( '${2:trimStr}' );$0",
      "description":"String.trimLeftStr"
    },
    "str-trimRightStr": {
      "prefix": ".trimRightStr",
      "body": "${1:srcString}.trimRightStr( '${2:trimStr}' );$0",
      "description":"String.trimRightStr"
    },
    "str-normalizeStr": {
      "prefix": ".normalizeStr",
      "body": "${1:srcString}.normalizeStr();$0",
      "description":"String.normalizeStr"
    },
    "str-capitalize": {
      "prefix": ".capitalize",
      "body": "${1:srcString}.capitalize();$0",
      "description":"String.capitalize"
    },
    "str-unCapitalize": {
      "prefix": ".unCapitalize",
      "body": "${1:srcString}.unCapitalize();$0",
      "description":"String.unCapitalize"
    },
    "str-toProperCase": {
      "prefix": ".toProperCase",
      "body": "${1:srcString}.toProperCase();$0",
      "description":"String.toProperCase"
    },
    "str-toJSON": {
      "prefix": ".toJSON",
      "body": "${1:srcString}.toJSON();$0",
      "description":"String.toJSON"
    },
    "str-toNative": {
      "prefix": ".toNative",
      "body": "${1:srcString}.toNative();$0",
      "description":"String.toNative"
    },
    "str-splitToArray": {
      "prefix": ".splitToArray",
      "body": "${1:srcString}.splitToArray( '${2:splitByStr}' );$0",
      "description":"String.splitToArray\nReturns: array"
    },

    "obj-clone": {
      "prefix": ".__clone",
      "body": "${1:srcObject}.__clone();$0",
      "description":"Object.__clone"
    },
    "obj-merge": {
      "prefix": ".__merge",
      "body": "${1:srcObject}.__merge( ${2:withObject1}, ${3:withObject2} );$0",
      "description":"Object.__merge"
    },
    "obj-stringify": {
      "prefix": ".__stringify",
      "body": "${1:srcObject}.__stringify();$0",
      "description":"Object.__stringify"
    },
    "obj-toQueryString": {
      "prefix": ".__toQueryString",
      "body": "${1:srcObject}.__toQueryString();$0",
      "description":"Object.__toQueryString"
    },
    "obj-keys": {
      "prefix": ".__keys",
      "body": "${1:srcObject}.__keys();$0",
      "description":"Object.__keys"
    },
    "obj-keysAll": {
      "prefix": ".__keysAll",
      "body": "${1:srcObject}.__keysAll();$0",
      "description":"Object.__keysAll"
    },
    "obj-hasKey": {
      "prefix": ".__hasKey",
      "body": "${1:srcObject}.__hasKey( '${2:key.path.string}' )$0",
      "description":"Object.__hasKey"
    },
    "obj-hasKeysAll": {
      "prefix": ".__hasKeysAll",
      "body": "${1:srcObject}.__hasKeys( '${2:key.path1}&${3:key.path2}' )$0",
      "description":"Object.__hasKeys"
    },
    "obj-hasKeysAny": {
      "prefix": ".__hasKeysAny",
      "body": "${1:srcObject}.__hasKeys( '${2:key.path1}|${3:key.path2}' )$0",
      "description":"Object.__hasKeys"
    },
    "obj-hasPrimaryKeysAll": {
      "prefix": ".__hasPrimaryKeysAll",
      "body": "${1:srcObject}.__hasPrimaryKeys( '${2:key.path1}&${3:key.path2}' )$0",
      "description":"Object.__hasPrimaryKeys"
    },
    "obj-hasPrimaryKeysAny": {
      "prefix": ".__hasPrimaryKeysAny",
      "body": "${1:srcObject}.__hasPrimaryKeys( '${2:key.path1}|${3:key.path2}' )$0",
      "description":"Object.__hasPrimaryKeys"
    },
    "obj-valueOf": {
      "prefix": ".__valueOf",
      "body": "${1:srcObject}.__valueOf( '${2:key.path}' )$0",
      "description":"Object.__valueOf"
    },

    "anonymous-function" : {
      "prefix": "f",
      "body": ["function ($1) {", "\t$0", "}"],
      "description": "Anonymous Function"
    },
    "named-function" : {
      "prefix": "fn",
      "body": ["function ${1:name} ( $2 ) {", "\t$0", "}"],
      "description": "Named Function"
    },
    "arrow-function" : {
      "prefix": "=>",
      "body": ["($1) => {", "\t$0", "}"],
      "description": "Anonymous Function"
    },

    "console-log": {
      "prefix": ["clg", "clog"],
      "body": "console.log($0);"
    },
    "console-time": {
      "prefix": "ctx",
      "body": "console.time('${1:label}');\n$0console.timeEnd('${1:label}');"
    },
    "console-group": {
      "prefix": "cgx",
      "body": "console.group('${1:label}');\n$0console.groupEnd('${1:label}');"
    }
  }
}